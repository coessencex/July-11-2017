using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace July_11_Tuesday
{
    class Program
    {
        static void Main(string[] args)
        {
            
            //ILinkedList<Person> x = new DoublyLinkedList<Person>();
            //x.AddToHead(new Node<Person>(PersonFactory.CreatePerson(2,2)));
            //x.AddToHead(new Node<Person>(PersonFactory.CreatePerson(2,2)));
            //x.AddToHead(new Node<Person>(PersonFactory.CreatePerson(2,2)));
            //x.AddToHead(new Node<Person>(PersonFactory.CreatePerson(2,2)));
            //Console.Write("Original : ");
            //x.Print();
            //var z = new LinkListSorter();   
            //var b = z.SortAscending(x);
            ////Console.Write("Sorted By Last Name Custom : ");
            //b.Print();

            ILinkedList<String> y = new DoublyLinkedList<string>();
            y.AddToHead(new Node<string>("z"));
            y.AddToHead(new Node<string>("x"));
            y.AddToHead(new Node<string>("a"));
            y.AddToHead(new Node<string>("y"));
            Console.Write("Normal : " );
            y.Print();
            y.MoveHeadToRight(2);
            Console.Write("Move 2 step : ");
            y.Print();
            var g = new LinkListSorter();
            var q = g.SortAscending(y);
            Console.Write("Sorted : ");
            q.Print();
            //Console.Write("Sorted By FirstName : ");
            //var c = z.SortAscending(x);
            //c.Print();
            Console.ReadLine();
        }

        public interface ILinkedList<T>
        {
            Node<T> Head { get; set; }
            Node<T> Tail { get; set; }
            int Count { get; set; }

            void AddToHead(Node<T> node);
            void AddToTail(Node<T> node);
            void DeleteFromHead();
            void DeleteFromTail();
            bool DeleteFromPosition(int position);
            bool Search(T Data);
            void SwapHeadAndTail();
            void MoveHeadToRight(int moves);
            void MoveHeadToLeft(int moves);
            void MoveTailToRight(int moves);
            void MoveTailToLeft(int moves);
            //void MoveTailToRight(int moves);
            //void MoveTailToLeft(int moves);
            bool Delete(T data);
            void Print();


        }

        public class SinglyLinkedList<T> : ILinkedList<T>
        {
            public Node<T> Head { get; set; }
            public Node<T> Tail { get; set; }
            public int Count { get; set; }

            public SinglyLinkedList()
            {
                this.Head = null;
                this.Tail = null;
                this.Count = -1;
            }

            public void AddToHead(Node<T> node)
            {
                if (Head != null)
                {
                    Head.Prev = node;
                    node.Next = Head;
                    Head = node;
                }
                else
                {
                    Head = node;
                    Tail = Head;
                }
                Count++;
            }
            public void AddToTail(Node<T> node)
            {
                if (Tail != null)
                {
                    //node.Prev = node;
                    //node.Next = Tail;
                    //Tail = node;

                    Tail.Next = node;
                    node.Prev = Tail;
                    Tail = node;
                    Count++;
                }
                else
                {
                    Tail = node;
                    Head = Tail;
                    Count++;
                }
            }
            public void DeleteFromHead() //O(c)
            {
                if (Head == Tail)
                {
                    Tail = null;
                }
                var temp = Head;
                Head = Head.Next;
                temp = null;
            }
            public void DeleteFromTail() //O(n)
            {
                if (Head == null)
                {
                    Head = null;
                    Tail = Head;
                }

                var tmp = Head;
                while (tmp.Next != Tail)
                {
                    tmp = tmp.Next;
                }
                Tail = tmp;
                tmp.Next = null;
            }
            public bool Delete(T data)
            {
                var tmp = Head;
                while (tmp != null)
                {
                    if (tmp.Data.Equals(data))
                    {
                        if (tmp == Head)
                        {
                            DeleteFromHead();
                            Count--;
                        }
                        else if (tmp == Tail)
                        {
                            DeleteFromTail();
                            Count--;
                        }
                        else
                        {
                            var newprev = tmp.Prev;
                            var newnext = tmp.Next;
                            newprev.Next = tmp.Next;
                            newnext.Prev = tmp.Prev;
                            Count--;
                        }
                        return true;
                    }
                    tmp = tmp.Next;
                }
                return false;
            }
            public bool DeleteFromPosition(int position)
            {
                Node<T> tmp = Head;
                if (position > Count)
                {
                    return true;
                }
                if (position < 0)
                {
                    return true;
                }
                else
                {
                    int tmpPos = position;
                    int index = 0;
                    while (index != tmpPos)
                    {
                        tmp = tmp.Next;
                        index++;
                    }
                    SLGeneralDelete(tmp);
                    return false;
                }

            }
            public bool Search(T data) //D
            {
                var tmp = Head; //A
                while (tmp != null)
                {
                    if (Equals(tmp.Data, data))
                    {
                        return true;
                    }
                    tmp = tmp.Next;
                }
                return false;
            }
            public void SwapHeadAndTail()
            {
                var tempHead = Head.Data;
                Head.Data = Tail.Data;
                Tail.Data = tempHead;
            }
            public void MoveHeadToRight(int moves)
            {
                if (moves > Count || moves < 0)
                {
                    throw new ArgumentOutOfRangeException();
                }

                var tmp = Head;
                int index = 0;
                while (index != moves)
                {
                    tmp = tmp.Next;
                    index++;
                }
                SLGeneralHeadSwap(tmp);
            }
            public void MoveHeadToLeft(int moves)
            {
                moves = moves * (-1);
                if (moves > Count || moves < 0)
                {
                    throw new ArgumentOutOfRangeException();
                }

                var tmp = Head;
                var tmp2 = Head;
                int index = 0;
                while (index != moves)
                {
                    tmp = tmp.Next;
                    index++;
                }
                SLGeneralHeadSwap(tmp);
            }
            public void MoveTailToRight(int moves)
            {
                moves = (moves + 1 - Count);
                if (moves > Count || moves < 0)
                {
                    throw new ArgumentOutOfRangeException();
                }
                var tmp = Head;
                int index = 0;
                while (index != moves)
                {
                    tmp = tmp.Next;
                    index++;
                }
                SLGeneralTailSwap(tmp);

            }
            public void MoveTailToLeft(int moves)
            {
                moves = (Count - moves + 1);
                if (moves > Count || moves < 0)
                {
                    throw new ArgumentOutOfRangeException();
                }
                var tmp = Head;
                int index = 0;
                while (index != moves)
                {
                    tmp = tmp.Next;
                    index++;
                }
                SLGeneralTailSwap(tmp);

            }
            public void Print()
            {
                var temp = Head;
                while (temp != null)
                {
                    Console.Write(" [" + temp.Data + "]");
                    temp = temp.Next;
                }
                Console.WriteLine();
            }

            public void SLGeneralDelete(Node<T> node)
            {
                if (node == Head)
                {
                    DeleteFromHead();
                    Count--;
                }
                if (node == Tail)
                {
                    DeleteFromTail();
                    Count--;
                }
                else
                {
                    var newprev = node.Prev;
                    var newnext = node.Next;
                    newprev.Next = node.Next;
                    newnext.Prev = node.Prev;
                    Count--;
                }
            }


            public void SLGeneralHeadSwap(Node<T> node)
            {
                var tempHead = Head.Data;
                Head.Data = node.Data;
                node.Data = tempHead;
            }
            public void SLGeneralTailSwap(Node<T> node)
            {
                var tempTail = Tail.Data;
                Tail.Data = node.Data;
                node.Data = tempTail;
            }
        }

        public class DoublyLinkedList<T> : ILinkedList<T>
        {
            public Node<T> Head { get; set; }
            public Node<T> Tail { get; set; }
            public int Count { get; set; }
            public DoublyLinkedList()
            {
                this.Head = null;
                this.Tail = null;
                this.Count = -1;
            }
            public void AddToHead(Node<T> node)
            {
                if (Head != null)
                {
                    Head.Prev = node;
                    node.Next = Head;
                    Head = node;
                }
                else
                {
                    Head = node;
                    Tail = Head;
                }
                Count++;

            }

            public void AddToTail(Node<T> node)
            {
                if (Tail != null)
                {
                    Tail.Next = node;
                    node.Prev = Tail;
                    Tail = node;
                    Count++;
                }
                else
                {
                    Tail = node;
                    Head = Tail;
                    Count++;
                }

            }
            public void DeleteFromHead()
            {
                if (Head == Tail)
                {
                    Head = Tail = null;
                }
                else { 
                Head = Head.Next;
                Head.Prev = null;
                }

            }
            public void DeleteFromTail()
            {
                Tail = Tail.Prev;
                Tail.Next = null;

            }
            public bool Delete(T data)
            {
                var tmp = Head;
                while (tmp != null)
                {
                    if (tmp.Data.Equals(data))
                    {
                        if (tmp == Head)
                        {
                            DeleteFromHead();
                            Count--;
                        }
                        else if (tmp == Tail)
                        {
                            DeleteFromTail();
                            Count--;
                        }
                        else
                        {
                            var newprev = tmp.Prev;
                            var newnext = tmp.Next;
                            newprev.Next = tmp.Next;
                            newnext.Prev = tmp.Prev;
                            Count--;
                        }
                        return true;
                    }
                    tmp = tmp.Next;
                }
                return false;
            }
            public bool DeleteFromPosition(int position)
            {
                var tmp = Head;
                if (position > Count)
                {
                    return true;
                }
                if (position < 0)
                {
                    return true;
                }
                else
                {
                    int tmpPos = position;
                    int index = 0;
                    while (index != tmpPos)
                    {
                        tmp = tmp.Next;
                        index++;
                    }
                    DLGeneralDelete(tmp);
                    return false;
                }

            }
            public bool Search(T data)  //D
            {
                var tmp = Head;         //A
                while (tmp != null)
                {
                    if (Equals(tmp.Data, data))
                    {
                        return true;
                    }
                    tmp = tmp.Next;
                }
                return false;
            }
            public void SwapHeadAndTail()
            {
                //SHALLOW
                //var tempHead = Head.Data;
                //Head.Data = Tail.Data;
                //Tail.Data = tempHead;

                //DEEP
                var head = Head;
                var tail = Tail;
                //there
                if (Head == Tail) return;
                if (Count == 2)
                {
                    Head = tail;
                    Tail = head;
                    Head.Next = Tail;
                    Tail.Prev = Head;
                    return;
                }


                //set the Next of Tail to the node next to Head
                Tail.Next = Head.Next;
                //set the Prev of 2nd node from Head to Tail
                Head.Next.Prev = Tail;

                //set the Head to the Tail
                Head = Tail;

                // set the old Head's Next to null since it will become the Tail
                head.Next = null;
                //set the Next of the node before the old tail to old head
                head.Prev = tail.Prev;
                tail.Prev.Next = head;

                //set Prev of Tail to null since it will become the Head
                Tail.Prev = null;
                Tail = head;
            }
            public void MoveHeadToRight(int moves)
            {
                if (moves > Count || moves < 0)
                {
                    throw new ArgumentOutOfRangeException();
                }

                if (moves > Count)
                {
                    throw new IndexOutOfRangeException("Move COunt error");
                }
                var secondNode = Head.Next;
                if (moves == Count)
                {
                    Tail.Next = Head;
                    Head.Prev = Tail;
                    Head.Next = null;

                    Tail = Head;
                    Head = secondNode;
                    Head.Prev = null;
                    return;
                }
                //int counter = 0;
                //var toswapNode = Head;
                //var temp = Head.Next;
                //while (counter < moves)
                //{
                //    toswapNode = toswapNode.Next;
                //    counter++;
                //}
                //var toswapNodeNext = toswapNode.Next;
                //toswapNode.Next = Head;
                //Head.Next = toswapNodeNext;
                //Head.Prev = toswapNode;
                //toswapNodeNext.Prev = Head;
                //Head = temp;
                //Head.Prev = null;


                //E J F A

                var head = Head;
                int position = 0;
                Head = head.Next;           //oldhead.next = NEW HEAD
                Head.Prev = null;
                var toSwapNode = Head;
                while (position != moves - 1)     //6 nodes, can 5 moves          3 moves; 
                {
                    toSwapNode = toSwapNode.Next;
                    position++;
                }                               //2 = 2     E
                head.Prev = null;
                head.Next = null;
                head.Next = toSwapNode.Next;            //oldhead.next = 
                toSwapNode.Next = head;

                ////Node<T> gg = toSwapNode.Next;
                ////Node<T> gg1 = toSwapNode.Prev;
                ////toSwapNode = head;
                //gg1.Next = Head;


            }
            public void MoveHeadToLeft(int moves)
            {
                moves = moves * (-1);
                if (moves > Count || moves < 0)
                {
                    throw new ArgumentOutOfRangeException();
                }

                var tmp = Head;
                var tmp2 = Head;
                int index = 0;
                while (index != moves)
                {
                    tmp = tmp.Next;
                    index++;
                }
                DLGeneralHeadSwap(tmp);
            }
            public void MoveTailToRight(int moves)
            {
                moves = (moves + 1 - Count);
                if (moves > Count || moves < 0)
                {
                    throw new ArgumentOutOfRangeException();
                }
                var tmp = Head;
                int index = 0;
                while (index != moves)
                {
                    tmp = tmp.Next;
                    index++;
                }
                DLGeneralTailSwap(tmp);

            }
            public void MoveTailToLeft(int moves)
            {
                int a = Count - moves;
                moves = a;
                if (moves > Count || moves < 0)
                {
                    throw new ArgumentOutOfRangeException();
                }
                var tmp = Head;
                int index = 0;
                while (index != moves)
                {
                    tmp = tmp.Next;
                    index++;
                }
                DLGeneralTailSwap(tmp);

            }

            public void Print()
            {
                var temp = Head;
                while (temp != null)
                {
                    Console.Write(" [" + temp.Data + "]");
                    temp = temp.Next;
                }
                Console.WriteLine();
            }
            public void DLGeneralDelete(Node<T> node)
            {
                if (node == Head)
                {
                    DeleteFromHead();
                    Count--;
                }
                else if (node == Tail)
                {
                    DeleteFromTail();
                    Count--;
                }
                else
                {
                    var newprev = node.Prev;
                    var newnext = node.Next;
                    newprev.Next = node.Next;
                    newnext.Prev = node.Prev;
                    Count--;
                }
            }
            public void DLGeneralHeadSwap(Node<T> node)
            {
                var tempHead = Head.Data;
                Head.Data = node.Data;
                node.Data = tempHead;
            }
            public void DLGeneralTailSwap(Node<T> node)
            {
                var tempTail = Tail.Data;
                Tail.Data = node.Data;
                node.Data = tempTail;
            }

        }

        public class CircularLinkedList<T> : ILinkedList<T>
        {
            public Node<T> Head { get; set; }
            public Node<T> Tail { get; set; }
            public int Count { get; set; }
            public CircularLinkedList()
            {
                this.Head = null;
                this.Tail = null;
                this.Count = -1;
            }
            public void AddToHead(Node<T> node)
            {
                if (Head != null)
                {
                    Head.Prev = node;
                    node.Next = Head;
                    Head = node;
                    Head.Prev = Tail;
                    Tail.Next = Head;

                }
                else
                {
                    Head = node;
                    Tail = Head;
                    Head.Prev = Tail;
                }
                Count++;

            }
            public void AddToTail(Node<T> node)
            {
                if (Tail != null)
                {
                    Tail.Next = node;
                    node.Prev = Tail;
                    Tail = node;
                    Tail.Next = Head;
                    Count++;
                }
                else
                {
                    Tail = node;
                    Head = Tail;
                    Count++;
                }

            }
            public void DeleteFromHead()
            {

                Head = Head.Next;
                Head.Prev = null;


            }
            public void DeleteFromTail()
            {
                Tail = Tail.Prev;
                Tail.Next = null;

            }
            public bool Delete(T data)
            {
                var tmp = Head;
                while (tmp != null)
                {
                    if (tmp.Data.Equals(data))
                    {
                        if (tmp == Head)
                        {
                            DeleteFromHead();
                            Count--;
                        }
                        else if (tmp == Tail)
                        {
                            DeleteFromTail();
                            Count--;
                        }
                        else
                        {
                            var newprev = tmp.Prev;
                            var newnext = tmp.Next;
                            newprev.Next = tmp.Next;
                            newnext.Prev = tmp.Prev;
                            Count--;
                        }
                        return true;
                    }
                    tmp = tmp.Next;
                }
                return false;
            }
            public bool DeleteFromPosition(int position)
            {
                var tmp = Head;
                if (position > Count)
                {
                    return true;
                }
                if (position < 0)
                {
                    return true;
                }
                else
                {
                    int tmpPos = position;
                    int index = 0;
                    while (index != tmpPos)
                    {
                        tmp = tmp.Next;
                        index++;
                    }
                    CLGeneralDelete(tmp);
                    return false;
                }

            }
            public bool Search(T data)  //D
            {
                var tmp = Head;         //A
                while (tmp != null)
                {
                    if (Equals(tmp.Data, data))
                    {
                        return true;
                    }
                    tmp = tmp.Next;
                }
                return false;
            }
            public void SwapHeadAndTail()
            {
                var tempHead = Head.Data;
                Head.Data = Tail.Data;
                Tail.Data = tempHead;
            }
            public void MoveHeadToRight(int moves)
            {

                var tmp = Head;
                int index = 0;
                while (index != moves)
                {
                    tmp = tmp.Next;
                    index++;
                }
                CLGeneralHeadSwap(tmp);
            }
            public void MoveHeadToLeft(int moves)
            {
                moves = moves * (-1);
                if (moves > Count || moves < 0)
                {
                    throw new ArgumentOutOfRangeException();
                }

                var tmp = Head;
                var tmp2 = Head;
                int index = 0;
                while (index != moves)
                {
                    tmp = tmp.Next;
                    index++;
                }
                CLGeneralHeadSwap(tmp);
            }
            public void MoveTailToRight(int moves)
            {
                moves = (moves + 1 - Count);
                if (moves > Count || moves < 0)
                {
                    throw new ArgumentOutOfRangeException();
                }
                var tmp = Head;
                int index = 0;
                while (index != moves)
                {
                    tmp = tmp.Next;
                    index++;
                }
                CLGeneralTailSwap(tmp);

            }
            public void MoveTailToLeft(int moves)
            {
                int a = Count - moves;
                moves = a;
                if (moves > Count || moves < 0)
                {
                    throw new ArgumentOutOfRangeException();
                }
                var tmp = Head;
                int index = 0;
                while (index != moves)
                {
                    tmp = tmp.Next;
                    index++;
                }
                CLGeneralTailSwap(tmp);

            }

            public void Print()
            {
                var temp = Head;
                while (temp != null)
                {
                    if (temp.Next == Head)
                    {
                        break;
                    }
                    Console.Write(" [" + temp.Data + "]");
                    temp = temp.Next;
                }
                Console.WriteLine();
            }
            public void CLGeneralDelete(Node<T> node)
            {
                if (node == Head)
                {
                    DeleteFromHead();
                    Count--;
                }
                else if (node == Tail)
                {
                    DeleteFromTail();
                    Count--;
                }
                else
                {
                    var newprev = node.Prev;
                    var newnext = node.Next;
                    newprev.Next = node.Next;
                    newnext.Prev = node.Prev;
                    Count--;
                }
            }
            public void CLGeneralHeadSwap(Node<T> node)
            {
                var tempHead = Head.Data;
                Head.Data = node.Data;
                node.Data = tempHead;
            }
            public void CLGeneralTailSwap(Node<T> node)
            {
                var tempTail = Tail.Data;
                Tail.Data = node.Data;
                node.Data = tempTail;
            }
        }
        public class Node<T>
        {
            public T Data { get; set; }
            public Node<T> Next { get; set; }
            public Node<T> Prev { get; set; }
            public Node()
            {
            }
            public Node(T data)
            {
                Data = data;
            }
        }

        public class Person : IComparable<Person>           //implement icomparable for sorter to find a way to compare dis
        {
            public string LastName { get; set; }
            public string FirstName { get; set; }

            public override string ToString()
            {
                //return String.Format(LastName +" "+  FirstName);
                return LastName;
            }

            public Person(string lastName, string firstName)
            {
                LastName = lastName;
                FirstName = firstName;

            }

            public int CompareTo(Person other)
            {
                //return String.Compare(LastName, other.LastName, StringComparison.Ordinal);
                //return (String.Compare(LastName, other.LastName, StringComparison.Ordinal));
                return LastName.CompareTo(other.LastName);
            }
        }

        public static class PersonFactory
        {
            private static int _lastNameIndex = 1;
            private static int _firstNameIndex = 1;
            public static Person CreatePerson(string lastname, string firstname)
            {
                return new Person(lastname, firstname);
            }

            public static Person CreatePerson()
            {
                var lastname = "L" + _lastNameIndex++;
                var firstname = "Person" + _firstNameIndex++;
                return new Person(lastname, firstname);
            }

            public static Person CreatePerson(int INameChars, int fNameChars)
            {
                return new Person(GetName(INameChars), GetName(fNameChars));
            }
            private static Random _random = new Random();

            private static string GetName(int characters)
            {
                var sb = new StringBuilder();
                for (int i = 0; i < characters; i++)
                {
                    sb.Append((char) (_random.Next((int) 'a', (int) 'z' + 1)));
                }
                return sb.ToString();
            }
        }

        public class LinkListSorter
        {
            public ILinkedList<T> SortAscending<T>(ILinkedList<T> linkedList, IComparer<T> comparer = null )

            {
                if (comparer == null) comparer = Comparer<T>.Default;



                var unsortedListCount = linkedList.Count;

                while (unsortedListCount > 0)
                {
                    //1. Get the smallest value from the linked list starting from head by comparing each node until the end of the list

                    var tmp = linkedList.Head;
                    var smallest = tmp;
                    for (int i = 0; i < unsortedListCount; i++)
                    {
                        if (comparer.Compare(tmp.Data, smallest.Data) <= 0) //smallest <= tmp
                        {
                            smallest = tmp;
                        }
                        tmp = tmp.Next;
                    }
                    // 1. get the smallest index
                    int smallestIndex = 0;
                    tmp = linkedList.Head;
                    while (tmp != smallest)
                    {
                        smallestIndex++;
                        tmp = tmp.Next;
                    }

                    //2. move the smallest to head
                    if (smallestIndex > 0)
                    {
                        for (int i = 0; i < smallestIndex; i++)
                        {
                            linkedList.MoveHeadToRight(unsortedListCount -1);
                        }
                    }
                    //3. add head to tail
                    var head = linkedList.Head;
                    linkedList.AddToTail(new Node<T>(head.Data));

                    //4. Remove Head
                    linkedList.DeleteFromHead();

                    //5. Unsorted list becomes Count -1
                    unsortedListCount--;
                }
                return linkedList;
            }
            
        }
    }

}
